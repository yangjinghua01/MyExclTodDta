package com.example.myexcltoddta.Dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.myexcltoddta.DetonatorData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DETONATOR_DATA".
*/
public class DetonatorDataDao extends AbstractDao<DetonatorData, Long> {

    public static final String TABLENAME = "DETONATOR_DATA";

    /**
     * Properties of entity DetonatorData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Detonator = new Property(1, String.class, "detonator", false, "DETONATOR");
        public final static Property Uid = new Property(2, String.class, "uid", false, "UID");
        public final static Property Area = new Property(3, String.class, "area", false, "AREA");
        public final static Property Group = new Property(4, String.class, "group", false, "GROUP");
        public final static Property Line = new Property(5, String.class, "line", false, "LINE");
        public final static Property Hole = new Property(6, String.class, "hole", false, "HOLE");
        public final static Property Position = new Property(7, String.class, "position", false, "POSITION");
        public final static Property Delay = new Property(8, String.class, "delay", false, "DELAY");
        public final static Property Reserved1 = new Property(9, String.class, "reserved1", false, "RESERVED1");
        public final static Property Reserved2 = new Property(10, String.class, "reserved2", false, "RESERVED2");
        public final static Property Reserved3 = new Property(11, String.class, "reserved3", false, "RESERVED3");
        public final static Property Reserved4 = new Property(12, String.class, "reserved4", false, "RESERVED4");
        public final static Property Reserved5 = new Property(13, String.class, "reserved5", false, "RESERVED5");
        public final static Property Reserved6 = new Property(14, String.class, "reserved6", false, "RESERVED6");
        public final static Property Reserved7 = new Property(15, String.class, "reserved7", false, "RESERVED7");
        public final static Property Reserved8 = new Property(16, String.class, "reserved8", false, "RESERVED8");
        public final static Property Reserved9 = new Property(17, String.class, "reserved9", false, "RESERVED9");
        public final static Property Reserved10 = new Property(18, String.class, "reserved10", false, "RESERVED10");
    }


    public DetonatorDataDao(DaoConfig config) {
        super(config);
    }
    
    public DetonatorDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DETONATOR_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"DETONATOR\" TEXT NOT NULL ," + // 1: detonator
                "\"UID\" TEXT NOT NULL ," + // 2: uid
                "\"AREA\" TEXT NOT NULL ," + // 3: area
                "\"GROUP\" TEXT NOT NULL ," + // 4: group
                "\"LINE\" TEXT NOT NULL ," + // 5: line
                "\"HOLE\" TEXT NOT NULL ," + // 6: hole
                "\"POSITION\" TEXT NOT NULL ," + // 7: position
                "\"DELAY\" TEXT NOT NULL ," + // 8: delay
                "\"RESERVED1\" TEXT NOT NULL ," + // 9: reserved1
                "\"RESERVED2\" TEXT NOT NULL ," + // 10: reserved2
                "\"RESERVED3\" TEXT NOT NULL ," + // 11: reserved3
                "\"RESERVED4\" TEXT NOT NULL ," + // 12: reserved4
                "\"RESERVED5\" TEXT NOT NULL ," + // 13: reserved5
                "\"RESERVED6\" TEXT NOT NULL ," + // 14: reserved6
                "\"RESERVED7\" TEXT NOT NULL ," + // 15: reserved7
                "\"RESERVED8\" TEXT NOT NULL ," + // 16: reserved8
                "\"RESERVED9\" TEXT NOT NULL ," + // 17: reserved9
                "\"RESERVED10\" TEXT NOT NULL );"); // 18: reserved10
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DETONATOR_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DetonatorData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getDetonator());
        stmt.bindString(3, entity.getUid());
        stmt.bindString(4, entity.getArea());
        stmt.bindString(5, entity.getGroup());
        stmt.bindString(6, entity.getLine());
        stmt.bindString(7, entity.getHole());
        stmt.bindString(8, entity.getPosition());
        stmt.bindString(9, entity.getDelay());
        stmt.bindString(10, entity.getReserved1());
        stmt.bindString(11, entity.getReserved2());
        stmt.bindString(12, entity.getReserved3());
        stmt.bindString(13, entity.getReserved4());
        stmt.bindString(14, entity.getReserved5());
        stmt.bindString(15, entity.getReserved6());
        stmt.bindString(16, entity.getReserved7());
        stmt.bindString(17, entity.getReserved8());
        stmt.bindString(18, entity.getReserved9());
        stmt.bindString(19, entity.getReserved10());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DetonatorData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getDetonator());
        stmt.bindString(3, entity.getUid());
        stmt.bindString(4, entity.getArea());
        stmt.bindString(5, entity.getGroup());
        stmt.bindString(6, entity.getLine());
        stmt.bindString(7, entity.getHole());
        stmt.bindString(8, entity.getPosition());
        stmt.bindString(9, entity.getDelay());
        stmt.bindString(10, entity.getReserved1());
        stmt.bindString(11, entity.getReserved2());
        stmt.bindString(12, entity.getReserved3());
        stmt.bindString(13, entity.getReserved4());
        stmt.bindString(14, entity.getReserved5());
        stmt.bindString(15, entity.getReserved6());
        stmt.bindString(16, entity.getReserved7());
        stmt.bindString(17, entity.getReserved8());
        stmt.bindString(18, entity.getReserved9());
        stmt.bindString(19, entity.getReserved10());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public DetonatorData readEntity(Cursor cursor, int offset) {
        DetonatorData entity = new DetonatorData( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // detonator
            cursor.getString(offset + 2), // uid
            cursor.getString(offset + 3), // area
            cursor.getString(offset + 4), // group
            cursor.getString(offset + 5), // line
            cursor.getString(offset + 6), // hole
            cursor.getString(offset + 7), // position
            cursor.getString(offset + 8), // delay
            cursor.getString(offset + 9), // reserved1
            cursor.getString(offset + 10), // reserved2
            cursor.getString(offset + 11), // reserved3
            cursor.getString(offset + 12), // reserved4
            cursor.getString(offset + 13), // reserved5
            cursor.getString(offset + 14), // reserved6
            cursor.getString(offset + 15), // reserved7
            cursor.getString(offset + 16), // reserved8
            cursor.getString(offset + 17), // reserved9
            cursor.getString(offset + 18) // reserved10
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DetonatorData entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setDetonator(cursor.getString(offset + 1));
        entity.setUid(cursor.getString(offset + 2));
        entity.setArea(cursor.getString(offset + 3));
        entity.setGroup(cursor.getString(offset + 4));
        entity.setLine(cursor.getString(offset + 5));
        entity.setHole(cursor.getString(offset + 6));
        entity.setPosition(cursor.getString(offset + 7));
        entity.setDelay(cursor.getString(offset + 8));
        entity.setReserved1(cursor.getString(offset + 9));
        entity.setReserved2(cursor.getString(offset + 10));
        entity.setReserved3(cursor.getString(offset + 11));
        entity.setReserved4(cursor.getString(offset + 12));
        entity.setReserved5(cursor.getString(offset + 13));
        entity.setReserved6(cursor.getString(offset + 14));
        entity.setReserved7(cursor.getString(offset + 15));
        entity.setReserved8(cursor.getString(offset + 16));
        entity.setReserved9(cursor.getString(offset + 17));
        entity.setReserved10(cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DetonatorData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DetonatorData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DetonatorData entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
